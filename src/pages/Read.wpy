<style>
  /* page {
    background-color: rgb(202, 183, 158);
  } */

  .read-content-container {
    display: flex;
    flex-direction: column;
    padding: 0 25rpx;
  }

  .content-title {
    font-size: 18px;
  }

  .content-tip {
    font-size: 11px;
    padding: 5rpx 0;
    color: rgb(129, 117, 114);
  }

  .content-content {
    margin-top: 35rpx;
    font-size: 14pt;
  }

  .read-charge-container {
    padding: 0 25rpx;
  }

  .charge-button {
    width: 75%;
    height:76rpx;
    line-height:76rpx;
    border-radius:38rpx;
    color: white;
    font-size: 12px;
    text-align: center;
    background-color: #56b356;
    margin-top: 55rpx;
  }

  .read-controller-container {
    display: flex;
    flex-direction: column;
    padding: 25rpx 0rpx 55rpx 25rpx;
  }

  .controller-btn {
    width: 75%;
    height:76rpx;
    line-height:76rpx;
    border-radius:38rpx;
    color: white;
    font-size: 12px;
    text-align: center;
    background-color: #56b356;
  }

  .controller-btn-hover {
    background-color: hsl(120, 33%, 60%);
  }

  .read-modal-container {
    position: fixed;
    bottom: 0;
    width: 100%;
    box-sizing: border-box;
    box-shadow:0px -1px 123px #888;
  }

  .read-modal-catalog {
    width: 45%;
    height: 3em;
    line-height: 3em;
    background-color: white;
    text-align: center;
    display: inline-block;
  }

  .read-modal-next {
    width: 55%;
    height: 3em;
    line-height: 3em;
    background-color: #56b356;
    color: white;
    text-align: center;
    display: inline-block;
  }
</style>

<template lang='pug'>
  <view>
    <view wx:if='{{!needToCharge}}' @tap.stop='tapContent'>
      <view class='read-content-container'>
          <text class='content-title'>{{content.chapter.title}}</text>
          <text @tap.stop='tapContent' class='content-content'>{{content.content}}</text>
      </view>
      <view wx:if='{{content}}' class='read-controller-container'>
          <button hover-class='controller-btn-hover' @tap.stop='tapNext' class='controller-btn'>下一章</button>
      </view>
      //- 目录弹出框
      <view wx:if='{{catalogModal}}' class='read-modal-container'>
        <view class='read-modal-catalog' @tap.stop='tapCatalog'>目录</view>
        <view class='read-modal-next' @tap.stop='tapNext'>下一章</view>
      </view>
    </view>
    <view wx:else class='read-charge-container'>
      <view class='content-title'>{{chapter.title}}</view>
      <view class='content-tip'>本章价格  {{chapter.costBalance}}{{unit}}</view>
      <view class='content-tip'>当前余额  {{userInfo.balance}}{{unit}}</view>
      <button hover-class='controller-btn-hover' class='charge-button' @tap.stop='tapChargeBtn'>充值</button>
    </view>
  </view>
</template>


<script>
  import wepy from 'wepy';
  import utils from '@/utils/util';
  import moment from 'moment';

  export default class Read extends wepy.page {
    config = {
      navigationBarTitleText: '阅读'
    };

    data = {
      unit: utils.unit,
      userInfo: wepy.getStorageSync('session').user,
      chapter: null,
      ficId: null,
      serial: null,
      content: null,
      needToCharge: false,
      catalogModal: false
    };

    methods = {
      /**
       * 点击充值按键
       */
      tapChargeBtn() {
        this.catalogModal = false;
        wepy.navigateTo({
          url: './Charge'
        });
      },
      /**
       * 点击小说内容
       */
      tapContent() {
        this.catalogModal = !this.catalogModal;
      },
      /**
       * 点击目录按键
       */
      tapCatalog() {
        this.catalogModal = false;
        wepy.navigateTo({
          url: './Catalog'
        });
      },
      /**
       * 点击下一章
       */
      tapNext() {
        this.$parent.globalData.setRead(this.ficId, null, this.serial + 1);
        wepy.redirectTo({
          url: './Read'
        });
      }
    };

    onShareAppMessage(options) {
      const openid = wepy.getStorageSync('session').user.openid;
      const timeStamp = moment(Date.now()).format('YYYY-MM-DDTHH:mm:ss.sss');
      const ficId = this.$parent.globalData.ficId;
      return {
        path: `/pages/Description?fromOpenid=${openid}&shareDate=${timeStamp}&ficId=${ficId}`,
        complete: res => {
          this.$parent.globalData.onShareCallback(res);
        }
      };
    }

    async onShow() {
      const ficId = this.$parent.globalData.ficId;
      const chapId = this.$parent.globalData.chapId;
      const serial = this.$parent.globalData.serial;
      //发起请求获取小说内容
      await this._loadContent(ficId, chapId, serial);
    }

    async _loadContent(ficId, chapId, serial) {
      try {
        //显示loading
        wepy.showLoading({
          title: '拼命加载'
        });
        const content = await this._pureLoadContent(ficId, chapId, serial);
        //章节不可看
        if (content.head && content.head.code === '0005') {
          this.ficId = content.body.chapter.ficId;
          this.title = content.body.chapter.title;
          this.chapter = content.body.chapter;
          this.$apply();
          //加载用户余额
          const balance = await this._loadBalance();
          if (balance >= content.body.chapter.costBalance) {
            wepy.hideLoading();
            const modalRet = await wepy.showModal({
              content: `当前章节需支付${content.body.chapter.costBalance}看点`,
              confirmText: '支付'
            });
            if (modalRet && modalRet.confirm) {
              //购买章节
              const successed = await this._purchaseChapter(content.body.chapter.id);
              if (successed) {
                //重新加载章节
                wepy.redirectTo({
                  url: './Read'
                });
              }
            }
            return;
          }
          //需要充值
          this.userInfo = { ...this.userInfo, balance };
          this.needToCharge = true;
          this.$apply();
          wepy.hideLoading();
          return;
        }
        //判断是否最后章节
        if (content.result === undefined) {
          wepy.hideLoading();
          wepy.showToast({
            title: '没有更新章节'
          });
          return;
        }
        const newFicId = content.result[0].fiction.id;
        const newChapter = content.result[0].chapter;
        const newSerial = newChapter.serial;
        //刷新数据
        this.needToCharge = false;
        this.content = content.result[0];
        this.chapter = newChapter;
        this.serial = newSerial;
        this.ficId = newFicId;
        //修改barTitle
        wepy.setNavigationBarTitle({
          title: newChapter.title
        });
        //同步全局章节记录
        this.$parent.globalData.setRead(newFicId, newChapter.id, newSerial);
        wepy.hideLoading();
      } catch (e) {
        wepy.hideLoading();
      } finally {
        this.catalogModal = false;
        this.$apply();
      }
    }

    async _loadBalance() {
      const { data } = await utils.fetch({
        url: `${utils.urlPrefix}/userbalances`
      });
      return data.result[0].balance || 0;
    }

    async _pureLoadContent(ficId, chapId, serial) {
      let params = {};
      if (ficId) {
        params.ficId = ficId;
      }
      if (chapId) {
        params.chapId = chapId;
      }
      if (serial) {
        params.serial = serial;
      }
      const { data } = await utils.fetch({
        url: `${utils.urlPrefix}/contents`,
        data: params
      });
      return data;
    }

    /**
    * 购买章节
    */
    async _purchaseChapter(chapId) {
      try {
        await utils.post({
          url: `${utils.urlPrefix}/userassets`,
          data: {
            chapId
          }
        });
        return true;
      } catch (err) {
        console.log('购买章节发生异常');
        return false;
      }
    }
  }
</script>

