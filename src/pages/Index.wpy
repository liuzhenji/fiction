<style>
.index-container {
  display: flex;
  flex-direction: column;
}

.classification-container {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-between;
  margin-top: 55rpx;
  padding: 15rpx 30rpx 30rpx 30rpx;
}

.classification-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.cls-item-image {
  height: 46rpx;
  width: 46rpx;
  border-radius: 46rpx;
  padding: 20rpx;
  /* background-color: blueviolet; */
}

.cls-item-title {
  color:rgb(73, 78, 78);
  font-size:10px;
  font-weight:500;
}

.ad-container {
  display: flex;
  flex-direction: column;
}

.ad-item-1 {
  display: flex;
  flex-direction: column;
  padding: 15rpx 30rpx;
}

.ad-item-1-image-container {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  padding: 15rpx 0;
  width: 100%;
}

.ad-item {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  padding: 15rpx 30rpx 15rpx 30rpx;
}

.ad-item-hover {
  background-color: #eee;
}

.ad-item-image {
  width: 20%;
  height: 200rpx;
}

.ad-item-content {
  width: 80%;
  height: 200rpx;
  padding-left: 30rpx;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: flex-start;
}

.content-title {
  font-size: 16px;
}

.content-artist {
  color: #797777;
  font-size: 14px;
}

.tag {
  text-align: center;
  font-size: 9px;
  color: white;
  padding: 0em 0.2em 0.05em 0.2em;
  border-radius: 0.3em;
  background-color: rgb(180, 92, 217);
}

.content-desc {
  color: #8d8d8d;
  font-size: 13px;
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
}

.classification {
  margin-left: 15rpx;
  font-size: 12px;
  color: rgb(86, 87, 104);
}
</style>

<template lang='pug'>
<view>
  // 检查模式
  <view wx:if='{{checkMode}}' class='ad-container'>
    <view class='ad-item-1'>
      <repeat for='{{advertisers}}' key='{{index}}'>
        <view @tap.stop='tapAd({{item.ficId}})' class='ad-item-1'>
          <text>{{item.title}}</text>
          <view class='ad-item-1-image-container'>
              <image class='index-image-large' mode='aspectFill' src='{{urlPrefix}}/statics/images/{{item.imgs}}'/>
          </view>
          <view class='ad-item-tags'>
            <view class='tag'>最新</view>
          </view>
        </view>
        <view class='separate-line-1'/>
      </repeat>
    </view>
    <view class='separate-line-1'/>
  </view>
  // 生产模式
  <view wx:else class='index-container'>
    // 小说分类
    <view class='classification-container'>
      <repeat for='{{classifications}}' key='{{index}}'>
        <view @tap.stop='tapClassification({{item.id}})' class='classification-item'>
          <image class='cls-item-image'  style='background-color:{{randomColor[index]}}' mode='aspectFill' src='{{urlPrefix}}/statics/images/{{item.icon}}'/>
          <view class='cls-item-title'>{{item.title}}</view>
        </view>
      </repeat>
    </view>
    // 小说精选
    <view class='ad-container'>
      <repeat for='{{fictions}}' key='{{index}}' item='item'>
        <view @tap.stop='tapFiction({{index}})' class='ad-item' hover-class='ad-item-hover'>
          <image class='ad-item-image' mode='aspectFill' src='{{urlPrefix}}/statics/images/{{item.avatar}}'/>
          <view class='ad-item-content'>
            <text class='content-title'>{{item.title}}</text>
            <text class='content-artist'>{{item.artist}}</text>
            <text class='content-desc'>{{item.description}}</text>
          </view>
          </view>
      </repeat>
    </view>
  </view>
</view>
</template>

<script>
import wepy from 'wepy';
import utils from '@/utils/util';
import moment from 'moment';

export default class Index extends wepy.page {
  data = {
    checkMode: true,
    pageNum: 1,
    pageSize: 10,
    randomColor: ['#ffadd2', '#ffa39e', '#ffbb96', '#ffd591', '#ffe58f', '#13c2c2', '#52c41a', '#a0d911', 'rgb(119, 218, 236)', 'rgb(121, 216, 143)'],
    classifications: null,
    advertisers: null,
    fictions: null,
    urlPrefix: utils.urlPrefix
  }

  methods = {

    tapFiction(index) {
      const fiction = this.fictions[index];
      this.$parent.globalData.setRead(fiction.id, null, 1);
      wepy.navigateTo({
        url: `./Description?avatar=${fiction.avatar}&title=${fiction.title}&artist=${fiction.artist}&description=${fiction.description}`
      });
    },
    tapClassification(clsId) {
      wepy.navigateTo({
        url: `./Fiction?clsId=${clsId}`
      });
    }
  }

  onShareAppMessage(options) {
    const openid = wepy.getStorageSync('session').user.openid;
    const timeStamp = moment(Date.now()).format('YYYY-MM-DDTHH:mm:ss.sss');
    return {
      path: `/pages/Index?fromOpenid=${openid}&shareDate=${timeStamp}`,
      complete: res => {
        this.$parent.globalData.onShareCallback(res);
      }
    };
  }

  async onShow() {
    wepy.showLoading({
      title: '疯狂加载'
    });
    const { data } = await utils.fetch({
      url: `${utils.urlPrefix}/systemconfigs/1`
    });
    //非审核模式
    if (!utils.doesCheckMode(data)) {
      const clses = await this._loadClses();
      const fictions = await this._loadFictions(1, this.pageSize);
      this.fictions = [...fictions];
      this.classifications = clses;
      this.checkMode = false;
    } else {
      const ads = await this._loadAds(1, this.pageSize);
      this.advertisers = [...ads];
      this.checkMode = true;
    }
    this.pageNum = 1;
    this.$apply();
    wepy.hideLoading();
  }

  async onReachBottom() {
    wepy.showLoading({
      title: '疯狂加载'
    });
    const nextPageNum = this.pageNum + 1;
    this.pageNum = nextPageNum;
    if (this.checkMode) {
      const newAds = await this._loadAds(nextPageNum, this.pageSize);
      this.advertisers = [...this.advertisers, ...newAds];
    } else {
      const newFics = await this._loadFictions(nextPageNum, this.pageSize);
      this.fictions = [...this.fictions, ...newFics];
    }
    this.$apply();
    wepy.hideLoading();
  }

  async _loadClses() {
    const { data } = await utils.fetch({
      url: `${utils.urlPrefix}/classifications`
    });
    return data.result || [];
  }

  async _loadFictions(pageNum, pageSize) {
    const { data } = await utils.fetch({
      url: `${utils.urlPrefix}/fictions?pageNum=${pageNum}&pageSize=${pageSize}`
    });
    return data.result || [];
  }

  async _loadAds(pageNum, pageSize) {
    const { data } = await utils.fetch({
      url: `${utils.urlPrefix}/ads?pageNum=${pageNum}&pageSize=${pageSize}`
    });
    return data.result || [];
  }
}
</script>
