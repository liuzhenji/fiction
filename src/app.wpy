<style lang='less'>
  
.old-container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  padding: 200rpx 0;
  box-sizing: border-box;
}
 
.container {
  padding: 25rpx 25rpx 0rpx 25rpx;
}

.separate-line-1 {
 height: 1px;
 margin: 0px 0px 0px 0rpx;
 background-color: #eee;
}

.separate-line-20 {
  height: 20rpx;
  margin: 0px 0px 0px 0rpx;
  background-color: #eee;
 }

 .blue-block {
   width: 3px;
   height: 14px;
   background-color: rgb(24, 144, 255);
 }

.padding-h-25 {
  margin: 0 25rpx;
}

.radio-hidden {
  position: absolute;
  clip: rect(0, 0, 0, 0);
}
</style>

<script>
import wepy from 'wepy';
import 'wepy-async-function';
import utils from './utils/util';

export default class extends wepy.app {
  config = {
    pages: [
      'pages/Index',
      'pages/ReadHistory',
      'pages/Me',
      'pages/Read',
      'pages/Charge',
      'pages/ChargeRecord',
      'pages/Fiction',
      'pages/Catalog'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black'
    },
    tabBar: {
      color: '#cdcdcd',
      selectedColor: '#63b632',
      backgroundColor: '#ffffff',
      position: 'bottom',
      'list': [
        {
          'pagePath': 'pages/Index',
          'text': '首页',
          'iconPath': 'resources/index-normal.png',
          'selectedIconPath': 'resources/index-selected.png'
        },
        {
          'pagePath': 'pages/ReadHistory',
          'text': '历史',
          'iconPath': 'resources/list-normal.png',
          'selectedIconPath': 'resources/list-selected.png'
        },
        {
          'pagePath': 'pages/Me',
          'text': '我',
          'iconPath': 'resources/me-normal.png',
          'selectedIconPath': 'resources/me-selected.png'
        }
      ]
    }
  }

  globalData = {
    userInfo: null
  }

  constructor () {
    super();
    //修复wx.request的并发bug
    this.use('requestfix');
    //默认将wepy.xxx方式请求小程序原生api都将promise化
    this.use('promisify');
    //建立原生request API的拦截
    this.intercept('request', {
      config (p) {
        let oldHeader = p.header;
        let newHeader = {...oldHeader,
          Cookie: `JSESSIONID=${wepy.getStorageSync('session').sessionId}`
        };
        p.header = newHeader;
        return p;
      },
      success (res) {
        //未建立3rd 会话，则重新建立
        if (res.statusCode === 401) {
          this._createSession();
          return;
        }
        return res;
      }
    });
  }

  onLaunch(options) {
    //开启分享设置
    wepy.showShareMenu({
      withShareTicket: true
    });
  }

  async onShow(options) {
    //开启初始化蒙版
    wepy.showLoading({
      title: '初始化信息',
      mask: true
    });
    try {
      //校验会话
      await wepy.checkSession();
    } catch (e) {
      //建立新会话
      await this._createSession();
      //发起用户来源数据统计
      await this._statUserSource(options);
    } finally {
      //同步用户信息到3rd server
      await this._loadUserInfo();
      await this._syncUserInfo();
      //关闭初始化蒙版
      await wepy.hideLoading();
    }
  }

  async _statUserSource(options) {
    await utils.post({
      url: `${utils.urlPrefix}/stat/usersources`,
      data: utils.convertO2O(
        options,
        {
          referrerInfo: {
            refAppid: val => {
              return val.appId;
            }
          }
        },
        {
          ...options.query
        }
      )
    });
  }

  _createSession() {
    return wepy.login().then((res) => {
      return utils.fetch({
        url: `${utils.urlPrefix}/sessions`,
        data: {
          code: res.code
        }
      });
    }).then((thrdRes) => {
      return wepy.setStorageSync('session', thrdRes.data);
    });
  }

  /**
   * 获取微信用户信息
   */
  async _loadUserInfo() {
    //已经获取过用户信息
    if (this.globalData.userInfo) {
      return;
    }
    //用户授权情况
    const setting = await wepy.getSetting();
    if (!setting.authSetting['scope.userInfo']) {
      try {
        await wepy.authorize({
          scope: 'scope.userInfo'
        });
      } catch (err) {
        await wepy.hideLoading();
        const ret = await wepy.showModal({
          title: '警告',
          content: '若不进行授权，本程序将不能正常运行。届时，您需要在微信【发现】-【小程序】-删掉该程序，重新搜索授权登录方可使用。'
        });
        if (ret.cancel) {
          return;
        }
        //打开授权框
        await wepy.openSetting();
      }
    }
    const userInfoRet = await wepy.getUserInfo();
    this.globalData.userInfo = userInfoRet.userInfo;
    //防止getUserInfo返回过晚
    if (this.loadUserInfoCallback) {
      this.loadUserInfoCallback(userInfoRet.userInfo);
    }
  }

  /**
   * 同步微信信息到3rd server
   */
  _syncUserInfo() {
    const userInfo = this.globalData.userInfo;
    if (!userInfo) {
      return;
    }
    return utils.post({
      url: `${utils.urlPrefix}/users`,
      data: {
        nickName: userInfo.nickName,
        gender: userInfo.gender,
        avatarUrl: userInfo.avatarUrl,
        city: userInfo.city,
        province: userInfo.province,
        country: userInfo.country,
        language: userInfo.language
      }
    }).catch(err => {
      //todo:输出到日志
    });
  }
}
</script>
